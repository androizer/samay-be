generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  email      String     @unique
  password   String
  name       String
  role       Role       @default(USER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt  // Automatically updated when record is modified

  // Relations
  activities Activity[]
  sessions   Session[]
  projectUsers ProjectUser[]
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Activity {
  id          String    @id @default(cuid())
  userId      String
  app         String
  url         String
  title       String
  description String?
  timestamp   String
  duration    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  selected    Boolean   @default(false)
  merged      Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}
// TODO: add user selected activites to project when user dragged and dropped
model Project {
  id Int @id @default(autoincrement())
  name String
  description String?
  icon String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  users ProjectUser[]
  @@map("projects")
}

model ProjectUser {
  id Int @id @default(autoincrement())
  projectId Int
  userId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("project_users")
}

enum Role {
  USER
  ADMIN
}
